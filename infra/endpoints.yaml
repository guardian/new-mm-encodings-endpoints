AWSTemplateFormatVersion: '2010-09-09'
Description: New style encodings endpoints
Parameters:
  App:
    Type: String
    Description: Application name
  Stack:
    Type: String
    Description: Stack name
  APIGatewayStack:
    Type: String
    Description: Name of a deployed `apigateway_base` instance
  InitialVersionId:
    Type: String
    Description: The version ID of the first version to deploy. Set this to the same value you used for "UPLOADVERSION" on your initial upload.
    Default: initial
  LambdaBucket:
    Type: String
    Description: Name of the bucket containing lambda function code
Resources:
  IdMappingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
        - AttributeName: filebase
          AttributeType: S
        - AttributeName: octopus_id
          AttributeType: N
        - AttributeName: lastupdate
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
        - AttributeName: lastupdate
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: octopusid
          KeySchema:
            - AttributeName: octopus_id
              KeyType: HASH
            - AttributeName: lastupdate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: filebase
          KeySchema:
            - AttributeName: filebase
              KeyType: HASH
            - AttributeName: lastupdate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
  EncodingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: encodingid
          AttributeType: N
        - AttributeName: contentid
          AttributeType: N
        - AttributeName: lastupdate
          AttributeType: S
        - AttributeName: fcs_id
          AttributeType: S
        - AttributeName: octopus_id
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: fcs_id
          KeyType: HASH
        - AttributeName: encodingid
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: octopusid
          KeySchema:
            - AttributeName: octopus_id
              KeyType: HASH
            - AttributeName: encodingid
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: contentid
          KeySchema:
            - AttributeName: contentid
              KeyType: HASH
            - AttributeName: lastupdate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
  MimeEquivalentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: mime_equivalent
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: mime_equivalent
          KeyType: HASH
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
  PosterFramesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: encodingid
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: encodingid
          KeyType: HASH
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack

  ## Access policy to allow API Gateway to call the Lambda service
  IAMAPIServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: API_Service_Role_Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: lambda:InvokeFunction
                Resource:
                  - !Sub ${ReferenceAPI.Arn}:*
                  - !Sub ${GenericOptions.Arn}:*
                  - !Sub ${VideoAPI.Arn}:*
                  - !Sub ${MediaTag.Arn}:*
                Effect: Allow

  ##common access policy used by the endpoints
  EndpointsAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:BatchGetItem
            Resource:
              - !GetAtt IdMappingTable.Arn
              - !Sub ${IdMappingTable.Arn}/index/*
              - !GetAtt EncodingsTable.Arn
              - !Sub ${EncodingsTable.Arn}/index/*
              - !GetAtt MimeEquivalentsTable.Arn
              - !Sub ${MimeEquivalentsTable.Arn}/index/*
              - !GetAtt PosterFramesTable.Arn
              - !Sub ${PosterFramesTable.Arn}/index/*

  ##`genericoptions` endpoint setup
  GenericOptionsRole: #this describes the access permissions that the lambda function has when executing
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - !Ref EndpointsAccessPolicy

  GenericOptions: #this describes the lambda function used to generate the API response
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-GenericOptions
      Description: Returns generic preflight CORS headers for multimedia encodings
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${App}/${Stack}/${InitialVersionId}/genericoptions.zip"
      Handler: genericoptions
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          ID_MAPPING_TABLE: !Ref IdMappingTable
          ENCODINGS_TABLE: !Ref EncodingsTable
          MIME_EQUIVALENTS_TABLE: !Ref MimeEquivalentsTable
          POSTER_FRAMES_TABLE: !Ref PosterFramesTable
      Role: !GetAtt GenericOptionsRole.Arn
      Timeout: 5
  GenericOptionsCodeAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the media-reference API
      FunctionName: !Ref GenericOptions
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: CODE

  GenericOptionsProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the media-reference API
      FunctionName: !Ref GenericOptions
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: PROD

  GenericOptionsPermissions: #this describes the permissions that allow the lambda function to be called
    Type: AWS::Lambda::Permission
    DependsOn:
      - GenericOptions
    Properties:
      Action: lambda:Invoke
      FunctionName: !Ref GenericOptions
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/*/OPTIONS/reference"

  ##`referenceapi` endpoint setup
  ReferenceAPIRole: #this describes the access permissions that the lambda function has when executing
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - !Ref EndpointsAccessPolicy

  ReferenceAPI: #this describes the lambda function used to generate the API response
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-References
      Description: Returns a text URL giving the location of the content
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${App}/${Stack}/${InitialVersionId}/referenceapi.zip"
      Handler: referenceapi
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          ID_MAPPING_TABLE: !Ref IdMappingTable
          ENCODINGS_TABLE: !Ref EncodingsTable
          MIME_EQUIVALENTS_TABLE: !Ref MimeEquivalentsTable
          POSTER_FRAMES_TABLE: !Ref PosterFramesTable
      Role: !GetAtt ReferenceAPIRole.Arn
      Timeout: 5
  ReferenceAPICodeAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the media-reference API
      FunctionName: !Ref ReferenceAPI
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: CODE

  ReferenceAPIProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the media-reference API
      FunctionName: !Ref ReferenceAPI
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: PROD

  ReferenceAPIPermissions:  #this describes the permissions that allow the lambda function to be called
    Type: AWS::Lambda::Permission
    DependsOn:
      - ReferenceAPI
    Properties:
      Action: lambda:Invoke
      FunctionName: !Ref ReferenceAPI
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/*/GET/reference"
  ReferenceAPIResource:   #this describes the HTTP path to be associated with this function
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      PathPart: reference.php
      ParentId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-InteractiveVidsBase
  ReferenceAPIEndpoint: #this creates the entry in the Rest API for the GET handler
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ReferenceAPIResource
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses: []
        PassthroughBehavior: WHEN_NO_TEMPLATES
        TimeoutInMillis: 5000
        IntegrationHttpMethod: POST
        Credentials: !GetAtt IAMAPIServiceRole.Arn
        ContentHandling: CONVERT_TO_TEXT
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ReferenceAPI}:${!stageVariables.stage}/invocations"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      ResourceId: !Ref ReferenceAPIResource
      OperationName: operation
  ReferenceAPIPreflight: #this creates the entry in the Rest API for the OPTIONS handler
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ReferenceAPIResource
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses: [ ]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        TimeoutInMillis: 5000
        IntegrationHttpMethod: POST
        Credentials: !GetAtt IAMAPIServiceRole.Arn
        ContentHandling: CONVERT_TO_TEXT
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GenericOptions}:${!stageVariables.stage}/invocations"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      ResourceId: !Ref ReferenceAPIResource
      OperationName: operation
  ##`video` endpoint setup
  VideoAPIRole: #this describes the access permissions that the lambda function has when executing
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - !Ref EndpointsAccessPolicy

  VideoAPI: #this describes the lambda function used to generate the API response
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-Video
      Description: Returns a URL in a location header giving the location of the content with a 302 status to trigger a redirect on the client
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${App}/${Stack}/${InitialVersionId}/video.zip"
      Handler: video
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          ID_MAPPING_TABLE: !Ref IdMappingTable
          ENCODINGS_TABLE: !Ref EncodingsTable
          MIME_EQUIVALENTS_TABLE: !Ref MimeEquivalentsTable
          POSTER_FRAMES_TABLE: !Ref PosterFramesTable
      Role: !GetAtt VideoAPIRole.Arn
      Timeout: 5
  VideoAPICodeAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the video endpoint
      FunctionName: !Ref VideoAPI
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: CODE

  VideoAPIProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the video endpoint
      FunctionName: !Ref VideoAPI
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: PROD

  VideoAPIPermissions:  #this describes the permissions that allow the lambda function to be called
    Type: AWS::Lambda::Permission
    DependsOn:
      - VideoAPI
    Properties:
      Action: lambda:Invoke
      FunctionName: !Ref VideoAPI
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/*/GET/video"
  VideoAPIResource:   #this describes the HTTP path to be associated with this function
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      PathPart: video.php
      ParentId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-InteractiveVidsBase
  VideoAPIEndpoint: #this creates the entry in the Rest API for the GET handler
    Type: AWS::ApiGateway::Method
    DependsOn:
      - VideoAPIResource
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses: []
        PassthroughBehavior: WHEN_NO_TEMPLATES
        TimeoutInMillis: 5000
        IntegrationHttpMethod: POST
        Credentials: !GetAtt IAMAPIServiceRole.Arn
        ContentHandling: CONVERT_TO_TEXT
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${VideoAPI}:${!stageVariables.stage}/invocations"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      ResourceId: !Ref VideoAPIResource
      OperationName: operation
  VideoAPIPreflight: #this creates the entry in the Rest API for the OPTIONS handler
    Type: AWS::ApiGateway::Method
    DependsOn:
      - VideoAPIResource
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses: [ ]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        TimeoutInMillis: 5000
        IntegrationHttpMethod: POST
        Credentials: !GetAtt IAMAPIServiceRole.Arn
        ContentHandling: CONVERT_TO_TEXT
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GenericOptions}:${!stageVariables.stage}/invocations"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      ResourceId: !Ref VideoAPIResource
      OperationName: operation
  ##`mediatag` endpoint setup
  MediaTagRole: #this describes the access permissions that the lambda function has when executing
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - !Ref EndpointsAccessPolicy

  MediaTag: #this describes the lambda function used to generate the API response
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-MediaTag
      Description: Returns HTML video tag with a SOURCE tag with the URL of a video in
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${App}/${Stack}/${InitialVersionId}/mediatag.zip"
      Handler: mediatag
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          ID_MAPPING_TABLE: !Ref IdMappingTable
          ENCODINGS_TABLE: !Ref EncodingsTable
          MIME_EQUIVALENTS_TABLE: !Ref MimeEquivalentsTable
          POSTER_FRAMES_TABLE: !Ref PosterFramesTable
      Role: !GetAtt MediaTagRole.Arn
      Timeout: 5
  MediaTagCodeAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the media tag
      FunctionName: !Ref MediaTag
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: CODE

  MediaTagProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      Description: Staging deployment for the media tag
      FunctionName: !Ref MediaTag
      FunctionVersion: "$LATEST"  #this is overriden in the deploy processes
      Name: PROD

  MediaTagPermissions:  #this describes the permissions that allow the lambda function to be called
    Type: AWS::Lambda::Permission
    DependsOn:
      - MediaTag
    Properties:
      Action: lambda:Invoke
      FunctionName: !Ref MediaTag
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/*/GET/reference"
  MediaTagResource:   #this describes the HTTP path to be associated with this function
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      PathPart: mediatag.php
      ParentId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-InteractiveVidsBase
  MediaTagEndpoint: #this creates the entry in the Rest API for the GET handler
    Type: AWS::ApiGateway::Method
    DependsOn:
      - MediaTagResource
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses: []
        PassthroughBehavior: WHEN_NO_TEMPLATES
        TimeoutInMillis: 5000
        IntegrationHttpMethod: POST
        Credentials: !GetAtt IAMAPIServiceRole.Arn
        ContentHandling: CONVERT_TO_TEXT
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${MediaTag}:${!stageVariables.stage}/invocations"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      ResourceId: !Ref MediaTagResource
      OperationName: operation
  MediaTagPreflight: #this creates the entry in the Rest API for the OPTIONS handler
    Type: AWS::ApiGateway::Method
    DependsOn:
      - MediaTagResource
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses: [ ]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        TimeoutInMillis: 5000
        IntegrationHttpMethod: POST
        Credentials: !GetAtt IAMAPIServiceRole.Arn
        ContentHandling: CONVERT_TO_TEXT
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GenericOptions}:${!stageVariables.stage}/invocations"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      ResourceId: !Ref MediaTagResource
      OperationName: operation
  ##API Gateway CODE environment setup
  RestAPIStageCode:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RestAPIDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      StageName: CODE
      Variables:
        stage: CODE
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: CODE

  RestAPIStageProd:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RestAPIDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI
      StageName: PROD
      Variables:
        stage: PROD
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: PROD

  ##DNS mappings to "real-world" addresses
  #  ApiGatewayDomainMapping:
  #    Type: AWS::ApiGateway::BasePathMapping
  #    Properties:
  #      DomainName: !Ref DeploymentServername
  #      RestApiId: !Ref RestAPI
  #      Stage: !Ref Stage
  #  ApiGatewayDomain:
  #    Type: AWS::ApiGateway::DomainName
  #    Properties:
  #      CertificateArn: !Ref DeploymentCertArn
  #      DomainName: !Ref DeploymentServername
  #      Tags:
  #        - Key: App
  #          Value: !Ref App
  #        - Key: Stack
  #          Value: !Ref Stack
  #        - Key: Stage
  #          Value: !Ref Stage

  ##Ensures that the API is deployed when things change above
  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ReferenceAPIEndpoint
    Properties:
      RestApiId: !ImportValue
        'Fn::Sub': ${APIGatewayStack}-RestAPI